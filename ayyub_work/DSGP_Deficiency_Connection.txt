DEFICIENCY_NAME_MAPPING = {
    # Rice format
    "Nitrogen(N)": "Nitrogen",
    "Phosphorus(P)": "Phosphorus",
    "Potassium(K)": "Potassium",
    
    # Coffee format
    "iron-Fe": "Iron",
    "magnesium-Mg": "Magnesium",
    "potasium-K": "Potassium",  # Note: handles the misspelling in your classes
    
    # Banana format
    "iron": "Iron",
    "magnesium": "Magnesium",
    "potassium": "Potassium",
    
    # Additional variations
    "nitrogen": "Nitrogen",
    "phosphorus": "Phosphorus",
    "n": "Nitrogen",
    "p": "Phosphorus",
    "k": "Potassium",
    "fe": "Iron",
    "mg": "Magnesium"
}

def get_fertilizer_recommendation(deficiency_type, severity_level):
    """Get fertilizer recommendation based on deficiency type and severity."""
    try:
        if deficiency_type == "Unknown":
            return "Cannot provide recommendation without valid deficiency type"

        recommendations = DOMAIN_KNOWLEDGE["fertilizer_recommendations"]
        
        # Debug logging
        logger.info(f"Getting recommendation for: {deficiency_type} (Severity: {severity_level})")
        
        # Clean the input
        cleaned_type = deficiency_type.strip()
        
        # First try direct mapping
        if cleaned_type in DEFICIENCY_NAME_MAPPING:
            standard_name = DEFICIENCY_NAME_MAPPING[cleaned_type]
        else:
            # Try different variations
            cleaned_lower = cleaned_type.lower()
            
            # Remove parentheses and hyphens
            base_name = cleaned_lower
            if '(' in base_name:
                base_name = base_name.split('(')[0].strip()
            if '-' in base_name:
                base_name = base_name.split('-')[0].strip()
            
            # Try to find a match
            if base_name in DEFICIENCY_NAME_MAPPING:
                standard_name = DEFICIENCY_NAME_MAPPING[base_name]
            else:
                # Try partial matching
                matches = [value for key, value in DEFICIENCY_NAME_MAPPING.items() 
                         if base_name in key.lower()]
                standard_name = matches[0] if matches else None

        logger.info(f"Standardized name: {standard_name}")
        
        if standard_name and standard_name in recommendations:
            if severity_level in recommendations[standard_name]:
                recommendation = recommendations[standard_name][severity_level]
                logger.info(f"Found recommendation: {recommendation}")
                return recommendation
            else:
                logger.warning(f"No recommendation found for severity level: {severity_level}")
                return f"No specific {severity_level} severity recommendation available for {standard_name} deficiency"
        
        logger.warning(f"No recommendation found for deficiency type: {deficiency_type}")
        return f"No recommendation found for {deficiency_type} deficiency"

    except Exception as e:
        logger.error(f"Error in get_fertilizer_recommendation: {str(e)}")
        logger.error(traceback.format_exc())
        return "Error getting fertilizer recommendation"



Front end:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Plant Nutrient Deficiency Analyzer</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="container">
        <header>
            <h1>Plant Nutrient Deficiency Analyzer</h1>
            <p class="subtitle">Upload a plant leaf image to analyze its nutrient deficiency</p>
        </header>

        <main>
            <form id="upload-form" class="upload-section">
                <div class="file-upload">
                    <input type="file" id="file-input" name="file" accept="image/*" required>
                    <label for="file-input">
                        <div class="upload-icon">üì∏</div>
                        <span>Choose an image or drag it here</span>
                    </label>
                    <div id="preview-container" class="preview-container" style="display: none;">
                        <img id="image-preview" src="#" alt="Preview">
                        <button type="button" id="remove-image" class="remove-button">√ó</button>
                    </div>
                </div>
                <button type="submit" class="analyze-button">Analyze Image</button>
            </form>

            <div id="loading" class="loading" style="display: none;">
                <div class="spinner"></div>
                <p>Analyzing image...</p>
            </div>

            <div id="error" class="error" style="display: none;"></div>

            <div id="results" class="results" style="display: none;">
                <div class="result-card">
                    <h2>Analysis Results</h2>
                    <div class="result-item">
                        <p id="plant-type" class="result-text"></p>
                        <div id="plant-confidence" class="confidence-bar"></div>
                    </div>
                    <div class="result-item">
                        <p id="deficiency-type" class="result-text"></p>
                        <div id="deficiency-confidence" class="confidence-bar"></div>
                    </div>
                    <div class="result-item">
                        <p id="severity-level" class="result-text"></p>
                        <div id="severity-confidence" class="confidence-bar"></div>
                    </div>
                </div>
            </div>
            
            <!-- Add this after your results section in your HTML -->
            <div id="soil-selection" class="soil-selection" style="display: none;">
                <div class="soil-selection-card">
                    <h2>Select Soil Type</h2>
                    <p class="subtitle">This helps us provide more accurate recommendations</p>
                    <div class="soil-options" id="soilOptions">
                        <div class="soil-option" data-soil="Clay">
                            <span class="soil-emoji">üè∫</span>
                            <span>Clay</span>
                        </div>
                        <div class="soil-option" data-soil="Loamy">
                            <span class="soil-emoji">üå±</span>
                            <span>Loamy</span>
                        </div>
                        <div class="soil-option" data-soil="Sandy">
                            <span class="soil-emoji">üèñÔ∏è</span>
                            <span>Sandy</span>
                        </div>
                    </div>
                    <button id="submitSoilType" class="analyze-button">Continue Analysis</button>
                </div>
            </div>


            <div id="detailed-report" class="detailed-report">
                <div class="report-card">
                    <h2>Detailed Plant Report</h2>
                    <div class="report-section">
                        <h3>Soil & Growing Conditions</h3>
                        <div class="report-grid">
                            <div class="report-item">
                                <h4>Soil Preferences</h4>
                                <div id="soil-preferences"></div>
                            </div>
                            <div class="report-item">
                                <h4>Optimal Conditions</h4>
                                <div id="growing-conditions"></div>
                            </div>
                        </div>
                    </div>
                    <div class="report-section">
                        <h3>Nutrient Requirements</h3>
                        <div id="nutrient-requirements"></div>
                    </div>
                    <div class="report-section">
                        <h3>Treatment Recommendations</h3>
                        <div id="treatment-recommendations"></div>
                    </div>
                    <div class="report-section">
                        <h3>Application Guidelines</h3>
                        <div id="application-guidelines"></div>
                    </div>
                </div>
            </div>
            
        </main>

        <footer>
            <p>Developed by Team Plant Nutrient Analyzer</p>
        </footer>
    </div>
    <script src="script.js"></script>
</body>
</html>

:root {
    --primary-color: #2c7a4e;
    --secondary-color: #4CAF50;
    --background-color: #f5f5f5;
    --text-color: #333;
    --error-color: #ff4444;
    --success-color: #00C851;
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    line-height: 1.6;
    background-color: var(--background-color);
    color: var(--text-color);
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
}

header {
    text-align: center;
    margin-bottom: 3rem;
}

h1 {
    color: var(--primary-color);
    margin-bottom: 1rem;
}

.subtitle {
    color: #666;
    font-size: 1.1rem;
}

.upload-section {
    background: white;
    padding: 2rem;
    border-radius: 10px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    margin-bottom: 2rem;
}

.file-upload {
    position: relative;
    text-align: center;
    margin-bottom: 1.5rem;
}

.file-upload input[type="file"] {
    display: none;
}

.file-upload label {
    display: block;
    padding: 2rem;
    border: 2px dashed #ccc;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.3s ease;
}

.file-upload label:hover {
    border-color: var(--primary-color);
    background-color: rgba(44, 122, 78, 0.05);
}

.upload-icon {
    font-size: 2.5rem;
    margin-bottom: 1rem;
}

.preview-container {
    position: relative;
    margin-top: 1rem;
}

.preview-container img {
    max-width: 300px;
    max-height: 300px;
    border-radius: 8px;
}

.remove-button {
    position: absolute;
    top: -10px;
    right: -10px;
    background: var(--error-color);
    color: white;
    border: none;
    border-radius: 50%;
    width: 25px;
    height: 25px;
    cursor: pointer;
    font-size: 1rem;
    line-height: 1;
}

.analyze-button {
    background-color: var(--primary-color);
    color: white;
    border: none;
    padding: 1rem 2rem;
    border-radius: 5px;
    cursor: pointer;
    font-size: 1.1rem;
    transition: background-color 0.3s ease;
    width: 100%;
}

.analyze-button:hover {
    background-color: var(--secondary-color);
}

.loading {
    text-align: center;
    margin: 2rem 0;
}

.spinner {
    border: 4px solid rgba(0, 0, 0, 0.1);
    border-left-color: var(--primary-color);
    border-radius: 50%;
    width: 40px;
    height: 40px;
    animation: spin 1s linear infinite;
    margin: 0 auto 1rem;
}

@keyframes spin {
    to {
        transform: rotate(360deg);
    }
}

.error {
    color: var(--error-color);
    text-align: center;
    padding: 1rem;
    background-color: rgba(255, 68, 68, 0.1);
    border-radius: 5px;
    margin: 1rem 0;
}

.results {
    margin-top: 2rem;
}

.result-card {
    background: white;
    padding: 2rem;
    border-radius: 10px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.result-card h2 {
    color: var(--primary-color);
    margin-bottom: 1.5rem;
    text-align: center;
}

.result-item {
    margin-bottom: 1.5rem;
}

.result-text {
    margin-bottom: 0.5rem;
    font-size: 1.1rem;
}

.confidence-bar {
    height: 10px;
    background-color: #eee;
    border-radius: 5px;
    overflow: hidden;
    position: relative;
}

.confidence-bar::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    background-color: var(--success-color);
    transition: width 0.3s ease;
}

footer {
    text-align: center;
    margin-top: 3rem;
    color: #666;
}

/* Add these to your existing CSS */
.confidence-text {
    font-size: 0.9em;
    color: #666;
    margin-left: 10px;
}

.confidence-fill {
    height: 100%;
    background-color: var(--success-color);
    transition: width 0.3s ease;
}

/* Add this section for the detailed report */
.detailed-report {
    margin-top: 2rem;
    display: none;
}

.detailed-report.visible {
    display: block;
}

.report-card {
    background: white;
    padding: 2rem;
    border-radius: 10px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    margin-top: 2rem;
}

.report-section {
    margin-bottom: 1.5rem;
}

.report-section h3 {
    color: var(--primary-color);
    margin-bottom: 1rem;
    border-bottom: 2px solid var(--secondary-color);
    padding-bottom: 0.5rem;
}

.report-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1rem;
    margin-top: 1rem;
}

.report-item {
    background: #f8f9fa;
    padding: 1rem;
    border-radius: 5px;
}

.report-item h4 {
    color: var(--primary-color);
    margin-bottom: 0.5rem;
}

.report-list {
    list-style: none;
    padding: 0;
}

.report-list li {
    margin-bottom: 0.5rem;
    padding-left: 1.5rem;
    position: relative;
}

.report-list li:before {
    content: "‚Ä¢";
    color: var(--secondary-color);
    position: absolute;
    left: 0;
}

@media (max-width: 768px) {
    .container {
        padding: 1rem;
    }

    .upload-section {
        padding: 1rem;
    }

    .preview-container img {
        max-width: 100%;
    }
}

/* Add to your existing CSS */
.soil-selection {
    margin-top: 2rem;
}

.soil-selection-card {
    background: white;
    padding: 2rem;
    border-radius: 10px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    text-align: center;
}

.soil-selection-card h2 {
    color: var(--primary-color);
    margin-bottom: 1rem;
}

.soil-selection-card .subtitle {
    color: #666;
    margin-bottom: 2rem;
}

.soil-options {
    display: flex;
    justify-content: center;
    gap: 2rem;
    margin-bottom: 2rem;
}

.soil-emoji {
    font-size: 2.5rem;
    display: block;
    margin-bottom: 0.5rem;
}

.soil-option {
    cursor: pointer;
    padding: 1.5rem;
    border-radius: 8px;
    border: 2px solid #eee;
    transition: all 0.3s ease;
    text-align: center;
    min-width: 120px;
}

.soil-option:hover {
    border-color: var(--primary-color);
    background-color: rgba(44, 122, 78, 0.05);
}

.soil-option.active {
    border-color: var(--primary-color);
    background-color: rgba(44, 122, 78, 0.1);
}

.soil-option img {
    width: 80px;
    height: 80px;
    margin-bottom: 0.5rem;
}

.soil-option span {
    display: block;
    color: var(--text-color);
    font-weight: 500;
}

/* Environmental Analysis Section */
.environmental-status {
    margin-top: 1rem;
    padding: 1rem;
    background-color: #f8f9fa;
    border-radius: 5px;
}

.environmental-status h4 {
    color: var(--primary-color);
    margin-bottom: 0.5rem;
}

.status-item {
    display: flex;
    justify-content: space-between;
    margin-bottom: 0.5rem;
    padding: 0.5rem;
    background: white;
    border-radius: 4px;
}

/* Add to your existing CSS */
.report-timestamp {
    background: #f8f9fa;
    padding: 1rem;
    border-radius: 5px;
    margin-bottom: 1rem;
    font-size: 0.9rem;
    color: #666;
}

.environmental-context {
    margin-top: 1rem;
    padding: 1rem;
    background: #f8f9fa;
    border-radius: 5px;
}

.environmental-context ul {
    list-style: none;
    padding-left: 0;
    margin-top: 0.5rem;
}

.environmental-context li {
    padding: 0.3rem 0;
    color: #666;
}

document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('upload-form');
    const fileInput = document.getElementById('file-input');
    const previewContainer = document.getElementById('preview-container');
    const imagePreview = document.getElementById('image-preview');
    const removeButton = document.getElementById('remove-image');
    let selectedSoilType = null;
    let initialAnalysisData = null;
    const currentUser = 'Muh-Ayyub';
    const currentDate = new Date().toISOString().slice(0, 19).replace('T', ' ');

    // Plant data object
    const plantData = {
        "soil_preferences": {
            "Banana": {
                "pH_range": [5.5, 7.0],
                "suitable_soils": ["Loamy", "Clay"]
            },
            "Coffee": {
                "pH_range": [5.0, 6.5],
                "suitable_soils": ["Loamy", "Sandy"]
            },
            "Rice": {
                "pH_range": [5.5, 7.5],
                "suitable_soils": ["Clay", "Loamy"]
            }
        },
        "plant_conditions": {
            "Banana": {
                "temp_range": [18, 30],
                "humidity_range": [50, 80]
            },
            "Coffee": {
                "temp_range": [15, 28],
                "humidity_range": [60, 90]
            },
            "Rice": {
                "temp_range": [20, 35],
                "humidity_range": [70, 100]
            }
        },
        "nutrient_requirements": {
            "Banana": {
                "N": 200,
                "P": 60,
                "K": 350
            },
            "Coffee": {
                "N": 150,
                "P": 50,
                "K": 200
            },
            "Rice": {
                "N": 100,
                "P": 40,
                "K": 150
            }
        },
        "fertilizer_recommendations": {
            "Nitrogen": {
                "Mild": "Apply 20-30 kg/ha of urea as a foliar spray.",
                "Moderate": "Apply 50 kg/ha of urea in split doses.",
                "Severe": "Apply 80-100 kg/ha of urea with soil incorporation."
            },
            "Phosphorus": {
                "Mild": "Apply 15-25 kg/ha of superphosphate.",
                "Moderate": "Apply 40 kg/ha of superphosphate.",
                "Severe": "Apply 60 kg/ha of superphosphate, deep placement."
            },
            "Potassium": {
                "Mild": "Foliar spray of 2% KCl weekly until symptoms disappear.",
                "Moderate": "Apply 40 kg/ha of K2O and monitor plant response.",
                "Severe": "Apply 80 kg/ha of K2O and incorporate into the soil."
            },
            "Magnesium": {
                "Mild": "Foliar spray of 5% MgSO4 or dolomite limestone at 3 t/ha.",
                "Moderate": "Apply 30-50 kg/ha of MgSO4 to the soil.",
                "Severe": "Apply 100 kg/ha of MgSO4 with irrigation water."
            },
            "Iron": {
                "Mild": "Soil application of FeSO4 (5 g/ha) or foliar spray of 0.5% FeSO4 weekly.",
                "Moderate": "Apply 10 g/ha of FeSO4 to the soil and monitor symptoms.",
                "Severe": "Apply chelated iron (EDDHA-Fe) for rapid correction."
            }
        },
        "fertilizer_application_guidelines": {
            "Application_Methods": {
                "Even_Precise_Spreading": "Use calibrated spreaders and perform tray tests to ensure even distribution.",
                "Split_Applications": {
                    "Nitrogen": "Apply in multiple splits‚Äî50% before transplanting, 25% at 30 days, 25% at panicle initiation.",
                    "Phosphorus_Potassium_Zinc": "Typically applied as a basal dose."
                },
                "Equipment_Conditions": "Adjust spreader settings based on weather to avoid uneven application."
            },
            "General_Best_Practices": {
                "Quality_Consistency": "Use high-quality fertilizers and store them properly.",
                "Timing_Precision": "Apply nutrients when crops need them most.",
                "Zone_Specific_Recommendations": "Follow field zone-based tables for tailored application rates."
            }
        }
    };

    // Handle file selection
    fileInput.addEventListener('change', function(e) {
        const file = e.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function(e) {
                imagePreview.src = e.target.result;
                previewContainer.style.display = 'block';
            };
            reader.readAsDataURL(file);
        }
    });

    // Handle image removal
    removeButton.addEventListener('click', function() {
        fileInput.value = '';
        previewContainer.style.display = 'none';
        imagePreview.src = '#';
        selectedSoilType = null;
        document.getElementById('soil-selection').style.display = 'none';
        document.getElementById('results').style.display = 'none';
        document.getElementById('detailed-report').classList.remove('visible');
    });

    // Handle soil type selection
    const soilOptions = document.querySelectorAll('.soil-option');
    soilOptions.forEach(option => {
        option.addEventListener('click', function() {
            soilOptions.forEach(opt => opt.classList.remove('active'));
            this.classList.add('active');
            selectedSoilType = this.getAttribute('data-soil');
        });
    });

    // Function to update result display
    function updateResult(elementId, label, value, confidence) {
        const element = document.getElementById(elementId);
        const confidenceBar = document.getElementById(elementId.split('-')[0] + '-confidence');
        
        if (element && confidenceBar) {
            if (value === "Unknown") {
                element.textContent = `${label}: ${value}`;
                element.innerHTML += `<span class="confidence-text">(${(confidence * 100).toFixed(1)}% confidence)</span>`;
                element.innerHTML += `<br><small class="text-muted">This may be a healthy plant or a type not currently detectable by the system.</small>`;
                document.getElementById('detailed-report').classList.remove('visible');
            } else {
                element.textContent = `${label}: ${value}`;
                const confidencePercent = (confidence * 100).toFixed(1);
                element.innerHTML += `<span class="confidence-text">(${confidencePercent}% confidence)</span>`;
                confidenceBar.innerHTML = `<div class="confidence-fill" style="width: ${confidencePercent}%"></div>`;
            }
        }
    }

    // Function to generate detailed report
    function generateDetailedReport(plantType, deficiencyType, severityLevel, environmentalData = null) {
        const report = document.getElementById('detailed-report');
        
        if (!report) {
            console.error('Detailed report element not found');
            return;
        }
    
        // Clear previous report content
        report.innerHTML = '';
    
        if (deficiencyType === "Unknown") {
            report.classList.remove('visible');
            return;
        }
    
        if (!plantData.soil_preferences[plantType]) {
            console.error('Plant type not found in data:', plantType);
            return;
        }
    
        // Create the main report card
        const reportCard = document.createElement('div');
        reportCard.className = 'report-card';
    
        // Add title
        const title = document.createElement('h2');
        title.textContent = 'Detailed Plant Report';
        reportCard.appendChild(title);
    
        // Add timestamp and user info
        const timestamp = document.createElement('div');
        timestamp.className = 'report-timestamp';
        timestamp.innerHTML = `
            <p><strong>Analysis Date:</strong> ${currentDate}</p>
            <p><strong>Analyzed by:</strong> ${currentUser}</p>
        `;
        reportCard.appendChild(timestamp);
    
        // Environmental Analysis Section (New)
        if (environmentalData) {
            const envSection = document.createElement('div');
            envSection.className = 'report-section';
            envSection.innerHTML = `
                <h3>Environmental Analysis</h3>
                <div class="report-grid">
                    <div class="report-item">
                        <h4>Current Conditions</h4>
                        <ul class="report-list">
                            <li>Location: ${environmentalData.location}</li>
                            <li>Temperature: ${environmentalData.temperature}¬∞C</li>
                            <li>Humidity: ${environmentalData.humidity}%</li>
                            <li>${environmentalData.status}</li>
                        </ul>
                    </div>
                    <div class="report-item">
                        <h4>Soil Analysis</h4>
                        <ul class="report-list">
                            <li>Selected Soil: ${selectedSoilType || 'Not specified'}</li>
                            <li>${environmentalData.soil_analysis.status}</li>
                        </ul>
                    </div>
                </div>
            `;
            reportCard.appendChild(envSection);
        }
    
        // Soil & Growing Conditions Section (Original)
        const soilSection = document.createElement('div');
        soilSection.className = 'report-section';
        soilSection.innerHTML = `
            <h3>Soil & Growing Conditions</h3>
            <div class="report-grid">
                <div class="report-item">
                    <h4>Soil Preferences</h4>
                    <div id="soil-preferences">
                        <ul class="report-list">
                            <li>pH Range: ${plantData.soil_preferences[plantType].pH_range[0]} - ${plantData.soil_preferences[plantType].pH_range[1]}</li>
                            <li>Suitable Soils: ${plantData.soil_preferences[plantType].suitable_soils.join(', ')}</li>
                        </ul>
                    </div>
                </div>
                <div class="report-item">
                    <h4>Optimal Conditions</h4>
                    <div id="growing-conditions">
                        <ul class="report-list">
                            <li>Temperature: ${plantData.plant_conditions[plantType].temp_range[0]}¬∞C - ${plantData.plant_conditions[plantType].temp_range[1]}¬∞C</li>
                            <li>Humidity: ${plantData.plant_conditions[plantType].humidity_range[0]}% - ${plantData.plant_conditions[plantType].humidity_range[1]}%</li>
                        </ul>
                    </div>
                </div>
            </div>
        `;
        reportCard.appendChild(soilSection);
        
        // Nutrient Requirements Section (Original)
        const nutrientSection = document.createElement('div');
        nutrientSection.className = 'report-section';
        nutrientSection.innerHTML = `
            <h3>Nutrient Requirements</h3>
            <div id="nutrient-requirements">
                <div class="report-grid">
                    <div class="report-item">
                        <h4>Recommended Nutrient Levels (kg/ha)</h4>
                        <ul class="report-list">
                            <li>Nitrogen (N): ${plantData.nutrient_requirements[plantType].N}</li>
                            <li>Phosphorus (P): ${plantData.nutrient_requirements[plantType].P}</li>
                            <li>Potassium (K): ${plantData.nutrient_requirements[plantType].K}</li>
                        </ul>
                    </div>
                </div>
            </div>
        `;
        reportCard.appendChild(nutrientSection);
    
        // Treatment Recommendations Section (Combined)
        const treatmentSection = document.createElement('div');
        treatmentSection.className = 'report-section';
        treatmentSection.innerHTML = `
            <h3>Treatment Recommendations</h3>
            <div id="treatment-recommendations">
                ${getTreatmentRecommendations(deficiencyType, severityLevel, environmentalData)}
            </div>
        `;
        reportCard.appendChild(treatmentSection);
    
        // Application Guidelines Section (Original)
        const guidelinesSection = document.createElement('div');
        guidelinesSection.className = 'report-section';
        guidelinesSection.innerHTML = `
            <h3>Application Guidelines</h3>
            <div id="application-guidelines">
                <div class="report-grid">
                    <div class="report-item">
                        <h4>Application Methods</h4>
                        <ul class="report-list">
                            <li>${plantData.fertilizer_application_guidelines.Application_Methods.Even_Precise_Spreading}</li>
                            <li>${plantData.fertilizer_application_guidelines.Application_Methods.Split_Applications.Nitrogen}</li>
                        </ul>
                    </div>
                    <div class="report-item">
                        <h4>Best Practices</h4>
                        <ul class="report-list">
                            <li>${plantData.fertilizer_application_guidelines.General_Best_Practices.Quality_Consistency}</li>
                            <li>${plantData.fertilizer_application_guidelines.General_Best_Practices.Timing_Precision}</li>
                            <li>${plantData.fertilizer_application_guidelines.General_Best_Practices.Zone_Specific_Recommendations}</li>
                        </ul>
                    </div>
                </div>
            </div>
        `;
        reportCard.appendChild(guidelinesSection);
    
        // Append the complete report card to the report container
        report.appendChild(reportCard);
        report.classList.add('visible');
    }

    function getTreatmentRecommendations(deficiencyType, severityLevel, environmentalData) {
        let deficiencyKey = deficiencyType;
        if (deficiencyType.includes('(')) {
            deficiencyKey = deficiencyType.split('(')[0].trim();
        } else if (deficiencyType.includes('-')) {
            deficiencyKey = deficiencyType.split('-')[0].trim();
        }
        deficiencyKey = deficiencyKey.charAt(0).toUpperCase() + deficiencyKey.slice(1);
    
        if (environmentalData && environmentalData.recommendation) {
            return `
                <div class="report-item">
                    <h4>${deficiencyType} Deficiency Treatment (${severityLevel})</h4>
                    <p>${environmentalData.recommendation.treatment}</p>
                    <div class="environmental-context">
                        <p><strong>Environmental Context:</strong></p>
                        <ul>
                            <li>${environmentalData.status}</li>
                            <li>${environmentalData.soil_analysis.status}</li>
                        </ul>
                    </div>
                </div>
            `;
        } else {
            const fertilizer = plantData.fertilizer_recommendations[deficiencyKey];
            return `
                <div class="report-item">
                    <h4>${deficiencyType} Deficiency Treatment (${severityLevel})</h4>
                    <p>${fertilizer ? fertilizer[severityLevel] : 'No specific recommendation available'}</p>
                </div>
            `;
        }
    }

    // Handle form submission
    form.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const formData = new FormData(form);
        if (selectedSoilType) {
            formData.append('soil_type', selectedSoilType);
        }
        
        try {
            // Show loading state
            document.getElementById('loading').style.display = 'block';
            document.getElementById('results').style.display = 'none';
            document.getElementById('error').style.display = 'none';
            document.getElementById('detailed-report').classList.remove('visible');
            
            const response = await fetch('http://localhost:5000/predict', {
                method: 'POST',
                body: formData
            });
            
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            
            const data = await response.json();
            
            // Hide loading state
            document.getElementById('loading').style.display = 'none';
            
            // Show results
            if (data.error) {
                document.getElementById('error').style.display = 'block';
                document.getElementById('error').textContent = data.error;
                return;
            }
            
            document.getElementById('results').style.display = 'block';
            
            // Update results display
            updateResult('plant-type', 'Plant Type', data.plant.type, data.plant.confidence);
            updateResult('deficiency-type', 'Deficiency', data.deficiency.type, data.deficiency.confidence);
            updateResult('severity-level', 'Severity', data.severity.level, data.severity.confidence);
            
            // Show soil selection if not already selected
            if (!selectedSoilType && data.plant.type !== "Unknown") {
                document.getElementById('soil-selection').style.display = 'block';
                document.getElementById('detailed-report').classList.remove('visible');
            }else{
                document.getElementById('soil-selection').style.display = 'none';
                // Generate detailed report
                generateDetailedReport(
                    data.plant.type,
                    data.deficiency.type,
                    data.severity.level,
                    {
                        location: data.environmental_analysis?.location || 'Unknown',
                        temperature: data.environmental_analysis?.temperature || 'N/A',
                        humidity: data.environmental_analysis?.humidity || 'N/A',
                        status: data.environmental_analysis?.status || 'Environmental data not available',
                        soil_analysis: data.soil_analysis || {
                            soil_type: selectedSoilType || 'Not specified',
                            status: 'Soil analysis not available'
                        },
                        recommendation: data.recommendation || null
                    }
                );
            }}
            
                        
                        
                     catch (error) {
                        console.error('Error:', error);
                        document.getElementById('loading').style.display = 'none';
                        document.getElementById('error').style.display = 'block';
                        document.getElementById('error').textContent = 'Error processing image. Please try again.';
                    }
                });
            
                // Add handler for soil type submission
                document.getElementById('submitSoilType').addEventListener('click', function() {
                    if (!selectedSoilType) {
                        alert('Please select a soil type to continue.');
                        return;
                    }
                    document.getElementById('soil-selection').style.display = 'none';
                    // Resubmit the form with the soil type
                    const formEvent = new Event('submit');
                    form.dispatchEvent(formEvent);
                });
            
                // Drag and drop handlers
                const dropZone = document.querySelector('.file-upload label');
            
                ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                    dropZone.addEventListener(eventName, preventDefaults, false);
                });
            
                function preventDefaults(e) {
                    e.preventDefault();
                    e.stopPropagation();
                }
            
                ['dragenter', 'dragover'].forEach(eventName => {
                    dropZone.addEventListener(eventName, highlight, false);
                });
            
                ['dragleave', 'drop'].forEach(eventName => {
                    dropZone.addEventListener(eventName, unhighlight, false);
                });
            
                function highlight(e) {
                    dropZone.classList.add('highlight');
                }
            
                function unhighlight(e) {
                    dropZone.classList.remove('highlight');
                }
            
                dropZone.addEventListener('drop', handleDrop, false);
            
                function handleDrop(e) {
                    const dt = e.dataTransfer;
                    const file = dt.files[0];
                    fileInput.files = dt.files;
                    
                    if (file) {
                        const reader = new FileReader();
                        reader.onload = function(e) {
                            imagePreview.src = e.target.result;
                            previewContainer.style.display = 'block';
                        };
                        reader.readAsDataURL(file);
                    }
                }
            });

